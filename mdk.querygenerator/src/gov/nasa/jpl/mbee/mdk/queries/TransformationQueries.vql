package gov.nasa.jpl.mbee.mdk.queries

import "http://www.nomagic.com/magicdraw/UML/2.5.0"



/**
 * Returns blocks with tag values (a slot referring to a property). These properties are owned attributes of a stereotype.
 * A slot assigns a value to the property.
 */
pattern taggedBlocks(block : Class, stereotype : Stereotype, slot : Slot, property : Property, value : LiteralSpecification) {
	find block(block);
	Class.appliedStereotypeInstance.slot(block, slot);
	Slot.definingFeature(slot, property); // Property of  Stereotype
	Slot.value(slot, value); // Slot value
	Stereotype.ownedAttribute(stereotype, property);
}

/**
 * Returns a pair of blocks that are in a generalization relationship (parent and child).
 * Also, it returns the stereotype that is assigned to the blocks, as well as the attributes
 * (parentAttribute and childAttribute) that should be in a redefinition relationship according to the desired design pattern.
 */
pattern generalizedTaggedBlockPairs(parentBlock : Class, childBlock : Class, stereotype : Stereotype, parentAttribute : Property, childAttribute : Property) {
	find generalizedTaggedBlocks(parentBlock, childBlock, stereotype, property);
	Class.ownedAttribute(parentBlock, parentAttribute);
	Class.ownedAttribute(childBlock, childAttribute);
	find propertyAttributes(property, name, type);
	find propertyAttributes(parentAttribute, name, type);
	find propertyAttributes(childAttribute, name, type);	
}


/**
 * Returns stereotypes that are not assigned to any classes and none of whose attrubutes are referred.
 */
pattern unreferredStereotypes(stereotype : Stereotype) {
	neg find usedStereotypes(stereotype);
}


/**
 * Returns 2 blocks that have a generalization relation between them, and define a value for the same stereotype attribute.
 * 
 */
private pattern generalizedTaggedBlocks(parentBlock : Class, childBlock : Class, stereotype : Stereotype, property : Property) {
	find taggedBlocks(parentBlock, stereotype, _, property, _);
	find generalization(parentBlock, childBlock);
	find taggedBlocks(childBlock, stereotype, _, property, _);
}


