package gov.nasa.jpl.mbee.mdk.queries

import "http://www.nomagic.com/magicdraw/UML/2.5.0"

private pattern blocks(class : Class) {
	Classifier.name(block, "Block");
	InstanceSpecification.classifier(instance, block);
	Class.appliedStereotypeInstance(class, instance);
}

private pattern properties(property : Property, name : java String, type : Type) {
	Property.name(property, name);
	Property.type(property, type);
}

private pattern stereotypes(stereotype : Stereotype, attribute : Property) {
	Stereotype.ownedAttribute(stereotype, attribute);
}

private pattern generalizations(general : Class, specific : Class) {
	Generalization.general(generalization, general);
	Generalization.specific(generalization, specific);
}

/**
 * Returns blocks with tags (properties). These tags are attributes of a Stereotypes and have a type (literal) and value.
 */
pattern taggedBlocks(block : Class, stereotype : Stereotype, slot : Slot, property : Property, value : LiteralSpecification) {
	find blocks(block);
	Class.appliedStereotypeInstance.slot(block, slot);
	Slot.definingFeature(slot, property); // Property of  Stereotype
	Slot.value(slot, value); // Slot value
	find stereotypes(stereotype, property);
} 

//pattern topmostTaggedBlocks(block : Class, stereotype : Stereotype, property : Property) {
//	neg find descendantTaggedBlocks(_, block, _, _);
//	find taggedBlocks(block, stereotype, _, property, _);
//}

private pattern descendantTaggedBlocks(parentBlock : Class, childBlock : Class, stereotype : Stereotype, property : Property) {
	find taggedBlocks(parentBlock, stereotype, _, property, _);
	find generalizations(parentBlock, childBlock);
	find taggedBlocks(childBlock, stereotype, _, property, _);
}

pattern generalizedTaggedBlockPairs(parentBlock : Class, childBlock : Class, stereotype : Stereotype, parentAttribute : Property, childAttribute : Property) {
	find descendantTaggedBlocks(parentBlock, childBlock, stereotype, property);
	Class.ownedAttribute(parentBlock, parentAttribute);
	Class.ownedAttribute(childBlock, childAttribute);
	find properties(property, name, type);
	find properties(parentAttribute, name, type);
	find properties(childAttribute, name, type);	
}

private pattern referredStereotypes(stereotype : Stereotype) {
	find stereotypes(stereotype, property);
	Class.appliedStereotypeInstance.classifier(class, stereotype);
	Class.appliedStereotypeInstance.slot.definingFeature(class, property);
}

pattern unreferredStereotypes(stereotype : Stereotype) {
	neg find referredStereotypes(stereotype);
}

