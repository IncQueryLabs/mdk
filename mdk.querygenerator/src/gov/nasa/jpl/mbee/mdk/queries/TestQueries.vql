package gov.nasa.jpl.mbee.mdk.queries

import "http://www.nomagic.com/magicdraw/UML/2.5.0"

/*
 * Pattern responsible for detecting circular dependency chains in UML models
 */
pattern CircularDependencyError(dep : Dependency) {
    //Call transitive closure of sub-pattern 'DependencyChain'
    find DependencyChain+(dep, dep);
}

/**
 * Pattern describing succession relation between two dependencies
 */
pattern DependencyChain(source : Dependency, target : Dependency) {
    Dependency.supplier(source, elem);
    Dependency.client(target, elem);
}

pattern dependencies(dependency : Dependency, source : NamedElement, target : NamedElement) {
	Dependency.supplier(dependency, target);
	Dependency.client(dependency, source);
}

pattern blocks(class : Class) {
	Classifier.name(block, "Block");
	InstanceSpecification.classifier(instance, block);
	Class.appliedStereotypeInstance(class, instance);
}

pattern generalizations(general : Class, specific : Class) {
	Generalization.general(generalization, general);
	Generalization.specific(generalization, specific);
}

/**
 * Returns blocks with tags (properties). These tags are attributes of a Stereotypes and have a type (literal) and value.
 */
pattern blockProperties(block : Class, stereotype : Stereotype, slot : Slot, property : Property, literal : LiteralSpecification) {
	find blocks(block);
	Class.appliedStereotypeInstance.slot(block, slot);
	Slot.definingFeature(slot, property); // Property of  Stereotype
	find stereotypes(stereotype, property);
	// Slot value
	Slot.value(slot, literal);
}

pattern topmostBlockProperties(block : Class, stereotype : Stereotype, property : Property) {
	find blockProperties(block, stereotype, _, property, _);
	find generalizations(general, block);
	neg find blockProperties(general, stereotype, _, property, _);
} or {
	find blockProperties(block, stereotype, _, property, _);
	neg find generalizations(_general, block);
}

pattern stereotypes(stereotype : Stereotype, attribute : Property) {
	Stereotype.ownedAttribute(stereotype, attribute);
}

